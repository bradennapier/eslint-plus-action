"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getResultMarkdownBody = exports.getIgnoredFilesSummary = exports.getLintSummary = exports.getSortedRuleSummaries = exports.getAnnotationSuggestions = void 0;
const tslib_1 = require("tslib");
const dedent_1 = tslib_1.__importDefault(require("dedent"));
const CREDIT_TAG = `
  <sup>
    Report generated by <b><a href="https://github.com/bradennapier/eslint-plus-action">eslint-plus-action</a></b>
  </sup>
`;
const REPORT_FOOTER = ` 
  ---

  ${CREDIT_TAG}  
`;
function getRuleSummaryTitle(summary) {
    return `## [${summary.level}] ${summary.ruleUrl ? `[${summary.ruleId}](${summary.ruleUrl})` : summary.ruleId}`;
}
function getAnnotationFileLink(annotation, data) {
    return `[${annotation.path}](
    ${data.repoHtmlUrl}/blob/${data.sha}/${annotation.path}#L${annotation.start_line}-L${annotation.end_line}
  )`;
}
function getAnnotationSuggestions({ suggestions, }) {
    return suggestions && suggestions.length > 0
        ? suggestions
            .map((suggestion) => `\t\t* [SUGGESTION] ${suggestion.desc}`)
            .join('\n')
        : '';
}
exports.getAnnotationSuggestions = getAnnotationSuggestions;
function getAnnotationFileLine(annotation) {
    return `Line ${annotation.start_line}${annotation.end_line !== annotation.start_line
        ? `-${annotation.end_line}`
        : ''}`;
}
function getLintAnnotation(annotation, data) {
    return dedent_1.default `- ${getAnnotationFileLink(annotation, data)} ${getAnnotationFileLine(annotation)} - ${annotation.message}${data.issueSummaryType === 'full' ? getAnnotationSuggestions(annotation) : ''}`;
}
function getRuleSummary(summary, data) {
    return dedent_1.default `
    ${getRuleSummaryTitle(summary)} 

    > ${summary.message}

    ${summary.annotations
        .map((annotation) => getLintAnnotation(annotation, data))
        .join('\n')}
  `;
}
function getSortedRuleSummaries(data) {
    const summaries = Array.from(data.state.rulesSummaries);
    if (summaries.length === 0) {
        return '';
    }
    return dedent_1.default `
    ---
    
    ${summaries
        .sort(([, a], [, b]) => a.level.localeCompare(b.level))
        .map(([, summary]) => getRuleSummary(summary, data))
        .join('\n\n---\n\n')}
  `;
}
exports.getSortedRuleSummaries = getSortedRuleSummaries;
function getLintSummary(data) {
    return dedent_1.default `
    |     Type     |         Occurrences          |              Fixable              |
    | ------------ | ---------------------------- | --------------------------------- | 
    | **Errors**   | ${data.state.errorCount}     | ${data.state.fixableErrorCount}   |
    | **Warnings** | ${data.state.warningCount}   | ${data.state.fixableWarningCount} |
    | **Ignored**  | ${data.state.ignoredCount}   | N/A                               |
  `;
}
exports.getLintSummary = getLintSummary;
const emojis = {
    success: ':white_check_mark: ',
    failure: ':x: ',
    skipped: ':white_circle: ',
    timed_out: ':watch: ',
};
function getLintConclusions(data, checkUrl) {
    return dedent_1.default `
    - **Result:**       ${emojis[data.state.conclusion] || ''}${data.state.conclusion}
    - **Annotations:** [${data.state.annotationCount} total](${checkUrl})
  `;
}
function getIgnoredFilesSummary(data, force = false) {
    if (!force &&
        (!data.reportIgnoredFiles || data.issueSummaryType !== 'full')) {
        return '';
    }
    return dedent_1.default `
    ---

    ## Ignored Files:

    ${data.state.ignoredFiles.map((filePath) => `- ${filePath}`).join('\n')}
  `;
}
exports.getIgnoredFilesSummary = getIgnoredFilesSummary;
function getResultMarkdownBody(data) {
    const checkUrl = `${data.prHtmlUrl}/checks?check_run_id=${data.state.checkId}`;
    return dedent_1.default `
    ## ESLint Summary [View Full Report](${checkUrl})
  
    > Annotations are provided inline on the [Files Changed](${data.prHtmlUrl}/files) tab. You can also see all annotations that were generated on the [annotations page](${checkUrl}).
  
    ${getLintSummary(data)}
    ${getLintConclusions(data, checkUrl)}
    ${getIgnoredFilesSummary(data)}
    ${getSortedRuleSummaries(data)}

    ${REPORT_FOOTER}
  `;
}
exports.getResultMarkdownBody = getResultMarkdownBody;
